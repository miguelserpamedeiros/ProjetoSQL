
-- 

DROP TABLE IF EXISTS bilhete;
DROP TABLE IF EXISTS frequent_flyer;
DROP TABLE IF EXISTS passageiro;
DROP TABLE IF EXISTS preco;
DROP TABLE IF EXISTS lugar;
DROP TABLE IF EXISTS classe;
DROP TABLE IF EXISTS atribuido;
DROP TABLE IF EXISTS aviao;
DROP TABLE IF EXISTS co_piloto;
DROP TABLE IF EXISTS auxilia;
DROP TABLE IF EXISTS pertence;
DROP TABLE IF EXISTS voo_programado;
DROP TABLE IF EXISTS voo;
DROP TABLE IF EXISTS habilitar;
DROP TABLE IF EXISTS ligacao_entre_aeroportos;
DROP TABLE IF EXISTS modelos_que_podem_albergar;
DROP TABLE IF EXISTS aeroporto;
DROP TABLE IF EXISTS modelo_de_aviao;
DROP TABLE IF EXISTS ter;
DROP TABLE IF EXISTS especialidade;
DROP TABLE IF EXISTS padrinho_voo;
DROP TABLE IF EXISTS tecnico;
DROP TABLE IF EXISTS comissario_de_bordo;
DROP TABLE IF EXISTS piloto;
DROP TABLE IF EXISTS trabalhar;
DROP TABLE IF EXISTS trabalhador;
DROP TABLE IF EXISTS companhia_aerea;
DROP TABLE IF EXISTS cidade;
DROP TABLE IF EXISTS pais;

CREATE TABLE pais(
	codigo VARCHAR(5),
  nome VARCHAR(60) NOT NULL, -- país é entidade forte de cidade
--
  CONSTRAINT pk_pais
			PRIMARY KEY(codigo),
--
	CONSTRAINT un_pais_nome
			UNIQUE(nome)
);

CREATE TABLE cidade (
    codigo VARCHAR(5),
    nome VARCHAR(60) NOT NULL,
    codigo_pais VARCHAR(5) NOT NULL, -- cidade é entidade fraca de país
--
		CONSTRAINT pk_cidade
		    PRIMARY KEY (codigo_pais, codigo),
--
		CONSTRAINT fk_codigo_pais
		    FOREIGN KEY (codigo_pais) 
				REFERENCES pais(codigo) ON DELETE CASCADE
);

CREATE TABLE companhia_aerea(
	codigo CHAR(3), -- codigo constituido por 3 letras
	nome VARCHAR(50) NOT NULL,
	pais VARCHAR(30) NOT NULL, 
	valor_por_milha DECIMAL(7,2),
	bonus_jules_verne DECIMAL(5,4), 
--
	CONSTRAINT pk_companhia_aerea 
			PRIMARY KEY (codigo),
--
	CONSTRAINT fk_companhia_pais
			FOREIGN KEY (pais) 
      REFERENCES pais(codigo),
--
	CONSTRAINT un_companhia_nome
			UNIQUE(nome), -- chave candidata: NOT NULL e UNIQUE,
--
	CONSTRAINT ck_bonus
			CHECK(bonus_jules_verne < 1)
);

CREATE TABLE trabalhador(
		id VARCHAR(10),
    inicio_atividade YEAR, -- ano que o trabalhador deu inicio da sua atividade
		nome VARCHAR(50) NOT NULL,
    nif NUMERIC(9) NOT NULL, 
    data_nascimento DATE NOT NULL,
    genero VARCHAR(20),
--
    CONSTRAINT pk_trabalhador 
				PRIMARY KEY (id, inicio_atividade),
--
		CONSTRAINT un_id
				UNIQUE (id), -- tornar o id unico na chave composta
--
    CONSTRAINT un_nif
				UNIQUE (nif) -- chave candidata: NOT NULL e UNIQUE
);


CREATE TABLE trabalhar(
		companhia CHAR(3), -- codigo de 3 letras da companhia aerea
		trabalhador VARCHAR(10),-- id do trabalhador
		trabalhador_inicio_atividade YEAR, 
		ano_entrada YEAR,
		ano_saida YEAR, -- pode ser NOT NULL se o trabalhador ainda nao fechou um ciclo na companhia
--
		CONSTRAINT pk_trabalhar 
				PRIMARY KEY (companhia, trabalhador, ano_entrada), -- chave primaria composta
--
		CONSTRAINT fk_trabalhar_companhia 
				FOREIGN KEY (companhia) 
				REFERENCES companhia_aerea(codigo),
--
		CONSTRAINT fk_trabalhar_trabalhador_inicio_atividade
				FOREIGN KEY (trabalhador, trabalhador_inicio_atividade) 
				REFERENCES trabalhador(id,inicio_atividade),
--
		CONSTRAINT ck_datas
				CHECK (ano_entrada >= trabalhador_inicio_atividade)
);


-- Desenvolvimento do IS-A
CREATE TABLE piloto(
		trabalhador VARCHAR(10),
		inicio_atividade YEAR, -- id do trabalhador que e piloto
--
		CONSTRAINT pk_piloto 
				PRIMARY KEY (trabalhador, inicio_atividade),
--
		CONSTRAINT fk_piloto_inicio_atividade
				FOREIGN KEY (trabalhador, inicio_atividade)
        REFERENCES trabalhador(id, inicio_atividade)
        ON DELETE CASCADE
);


CREATE TABLE comissario_de_bordo(
		trabalhador VARCHAR(10), -- id do trabalhador que e comissario de bordo
		inicio_atividade YEAR,
--
		CONSTRAINT pk_comissario
				PRIMARY KEY (trabalhador,inicio_atividade),
--
		CONSTRAINT fk_comissario_inicio_atividade
				FOREIGN KEY (trabalhador, inicio_atividade)
        REFERENCES trabalhador(id, inicio_atividade)
        ON DELETE CASCADE
);


CREATE TABLE tecnico(
		trabalhador VARCHAR(10), -- id do trabalhador que e tecnico
		inicio_atividade YEAR,
--
		CONSTRAINT pk_tecnico
				PRIMARY KEY (trabalhador,inicio_atividade),
--
		CONSTRAINT fk_tecnico_inicio_atividade
				FOREIGN KEY (trabalhador, inicio_atividade)
        REFERENCES trabalhador(id, inicio_atividade)
        ON DELETE CASCADE
);


CREATE TABLE padrinho_voo(
		afilhado VARCHAR(10) NOT NULL, -- um piloto so pode ter um padrinho
		afilhado_inicio_atividade YEAR,
		padrinho VARCHAR(10),
		padrinho_inicio_atividade YEAR,
		data_apadrinhamento DATE, -- data que um piloto ganhou um padrinho de voo
--
		CONSTRAINT pk_padrinho_voo 
				PRIMARY KEY (afilhado, afilhado_inicio_atividade, padrinho, padrinho_inicio_atividade),
--
		CONSTRAINT fk_afilhado
				FOREIGN KEY (afilhado, afilhado_inicio_atividade) 
				REFERENCES piloto(trabalhador, inicio_atividade),
--
		CONSTRAINT fk_padrinho 
				FOREIGN KEY (padrinho, padrinho_inicio_atividade) 
				REFERENCES piloto(trabalhador, inicio_atividade),
--
		CONSTRAINT ck_padrinho_afilhado
				CHECK (afilhado != padrinho), -- RIA: um piloto nao pode ser padrinho de si mesmo
--
		CONSTRAINT ck_datas_padrinho_afilhado -- RIA: o inicio de atividade do padrinho deve ser inferior ao do afilhado
				CHECK (padrinho_inicio_atividade < afilhado_inicio_atividade) 
);


CREATE TABLE especialidade(
		nome VARCHAR(50),
--
		CONSTRAINT pk_especialidade
				PRIMARY KEY (nome)
);


CREATE TABLE ter(
		tecnico VARCHAR(10),
		tecnico_inicio_atividade YEAR,
    especialidade VARCHAR(50),
--
    CONSTRAINT pk_ter
				PRIMARY KEY (tecnico, tecnico_inicio_atividade, especialidade),
--
		CONSTRAINT fk_ter_tecnico
				FOREIGN KEY (tecnico, tecnico_inicio_atividade)
				REFERENCES tecnico(trabalhador, inicio_atividade),
--
		CONSTRAINT fk_ter_especialidade
				FOREIGN KEY (especialidade)
        REFERENCES especialidade(nome)
);



CREATE TABLE modelo_de_aviao (
    modelo CHAR(3),-- tem de ter 3 letras
    marca VARCHAR(30) NOT NULL,
    maximo_lugares SMALLINT NOT NULL, -- máximo de lugares vai determinar o nº de bilhetes que podem ser vendidos para o voo em questão
    comissarios_de_bordo SMALLINT NOT NULL, -- determina o nº de comissários na tripulação
    horas_minimas_para_comandar SMALLINT NOT NULL, -- horas mínimas exigidas para o piloto ser comandante
--
		CONSTRAINT pk_modelo_de_aviao
				PRIMARY KEY (modelo),
--
		CONSTRAINT ck_modelo_de_aviao_maximo_lugares
				CHECK (maximo_lugares > 0),
--
		CONSTRAINT ck_comissarios_de_bordo
				CHECK (comissarios_de_bordo > 0),
--
		CONSTRAINT ck_horas_minimas_para_comandar
				CHECK (horas_minimas_para_comandar > 0)
);


CREATE TABLE aeroporto(
    codigo VARCHAR(10) NOT NULL, -- código alfanumerico
    nome VARCHAR(200) NOT NULL,
		latitude DECIMAL(10,6) NOT NULL, 
		longitude DECIMAL (10,6) NOT NULL,
		tempo_de_transfer TIME NOT NULL, 
		horario_de_abertura TIME,  -- pode ter ou não horário de abertura e fecho, por isso não impomos NOT NULL
		horario_de_fecho TIME,
		pais VARCHAR(5) NOT NULL,
		cidade VARCHAR(5) NOT NULL,
		
--
		CONSTRAINT pk_aeroporto
		    PRIMARY KEY (codigo),
--
		CONSTRAINT fk_aeroporto_pais_cidade
			FOREIGN KEY (pais,cidade) 
			REFERENCES cidade(codigo_pais, codigo) 
			ON DELETE CASCADE,
--
		CONSTRAINT un_aeroporto_nome
			UNIQUE (nome),
--
		CONSTRAINT un_aeroporto_coordenadas -- o valor  composto de latitude e longitude tem de ser única
			UNIQUE(latitude, longitude)
);


CREATE TABLE modelos_que_podem_albergar(  
		aeroporto VARCHAR(10) NOT NULL,
		modelo_de_aviao CHAR(3) NOT NULL,
--
		CONSTRAINT pk_modelos_que_podem_albergar
				PRIMARY KEY (aeroporto,modelo_de_aviao), 
--
		CONSTRAINT fk_albergar_aeroporto
				FOREIGN KEY (aeroporto) 
				REFERENCES aeroporto(codigo) 
				ON DELETE CASCADE,
--
		CONSTRAINT fk_albergar_modelo
				FOREIGN KEY (modelo_de_aviao) 
				REFERENCES modelo_de_aviao(modelo) 
				ON DELETE CASCADE
);


CREATE TABLE ligacao_entre_aeroportos(
		aeroporto1_codigo VARCHAR(10) NOT NULL,
		aeroporto2_codigo VARCHAR(10) NOT NULL,
		milhas INT NOT NULL,
--
		CONSTRAINT pk_ligacao_entre_aeroportos -- esta restrição faz com que não seja possível ligar um aeroporto a si mesmo
				PRIMARY KEY (aeroporto1_codigo, aeroporto2_codigo),
--
		CONSTRAINT fk_ligacao_aeroporto1
				FOREIGN KEY (aeroporto1_codigo) 
				REFERENCES aeroporto(codigo) 
				ON DELETE CASCADE,
--
		CONSTRAINT fk_ligacao_aeroporto2
				FOREIGN KEY (aeroporto2_codigo) 
				REFERENCES aeroporto(codigo) 
				ON DELETE CASCADE,
--
		CONSTRAINT ck_ligacao_milhas
				CHECK (milhas > 0)
);




CREATE TABLE habilitar(
		id_piloto VARCHAR(10) NOT NULL,
		modelo_habilitado CHAR(3) NOT NULL,
		data_de_habilitacao DATE NOT NULL,
--
		CONSTRAINT pk_habilitar
				PRIMARY KEY (id_piloto,modelo_habilitado),
--
		CONSTRAINT fk_habilitar_piloto
				FOREIGN KEY (id_piloto) 
				REFERENCES trabalhador(id) 
				ON DELETE CASCADE,
--
		CONSTRAINT fk_habilitar_modelo
				FOREIGN KEY(modelo_habilitado) 
				REFERENCES modelo_de_aviao(modelo) 
				ON DELETE CASCADE
);

